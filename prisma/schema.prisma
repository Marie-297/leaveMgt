generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  phone         String?
  title         String?
  manager       String?
  department    String?
  // department    String[] @default(["FINANCE", "ADMINISTRATION", "INFORMATION TECHNOLOGY","LABORATORY", "PRODUCTION", "RETAIL"])
  accounts      Account[]
  balances      Balances[]
  sessions      Session[]
}

model LeaveType {
  id          String   @id @default(cuid())
  title       String
  values      String[] @default(["Credit", "Used", "Available"])
  category    String
  description String?
}

model Leave {
  id            String      @id @default(cuid())
  type          LeaveCategory
  year          String      @default("")
  startDate     DateTime
  endDate       DateTime
  days          Int
  userName      String
  department    Department @default(INFORMATION_TECHNOLOGY)
  userNote      String?
  tasksLink     String?
  userEmail     String
  status        LeaveStatus @default(PENDING)
  moderator     String?
  moderatorNote String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model Balances {
  id                 String @id @default(cuid())
  year               String
  annualCredit       Int?   @default(0)
  annualUsed         Int?   @default(0)
  annualAvailable    Int?   @default(0)
  sickCredit       Int?   @default(0)
  sickUsed         Int?   @default(0)
  sickAvailable    Int?   @default(0)
  studyCredit        Int?   @default(0)
  studyUsed          Int?   @default(0)
  studyAvailable     Int?   @default(0)
  maternityCredit    Int?   @default(0)
  maternityUsed      Int?   @default(0)
  maternityAvailable Int?   @default(0)
  casualCredit       Int?   @default(0)
  casualUsed         Int?   @default(0)
  casualAvailable    Int?   @default(0)
  paternityCredit    Int?   @default(0)
  paternityUsed      Int?   @default(0)
  paternityAvailable Int?   @default(0)
  unpaidUsed         Int?   @default(0)
  name               String
  email              String
  user               User   @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Events {
  userEmail   String
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum LeaveCategory {
  Sick
  Study
  Maternity
  paternity
  Casual
  Annual
  unpaid
  }

enum LeaveStatus {
  PENDING
  APPROVED
  INMODERATION
  REJECTED
}
enum Department {
  FINANCE
  ADMINISTRATION
  INFORMATION_TECHNOLOGY
  LABORATORY
  PRODUCTION
  RETAIL
}
